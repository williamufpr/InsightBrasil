# app.py
import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from streamlit_plotly_events import plotly_events # Para interatividade de clique

# --- 0. Configura√ß√µes Iniciais da P√°gina Streamlit ---
st.set_page_config(layout="wide", page_title="Otimiza√ß√£o de Consumo de Equipamentos")

# --- 1. Carregar e Preparar os Dados ---
# Usamos st.cache_data para que os dados sejam carregados e processados apenas uma vez
# e depois armazenados em cache, otimizando a performance do app.
@st.cache_data
def load_transformed_data(file_path):
    """
    Carrega o CSV de consumo j√° transformado.
    """
    df = pd.read_csv(file_path)
    # Garante que a coluna 'timestamp' seja do tipo datetime
    df['timestamp'] = pd.to_datetime(df['timestamp'], utc=True)
    # Extrai o dia do m√™s e a hora do dia novamente, se n√£o estiverem corretos ou para garantir
    df['day_of_month'] = df['timestamp'].dt.day
    df['hour_of_day'] = df['timestamp'].dt.hour
    df['date_only'] = df['timestamp'].dt.date # Para visualiza√ß√£o de data simples
    # Adicionar coluna para identificar a semana do ano
    # Usaremos 'isocalendar().week' para a semana do ano
    df['week_of_year'] = df['timestamp'].dt.isocalendar().week.astype(int)

    # Adicionar coluna para tipo de dia (Dia de Semana / Fim de Semana)
    # weekday() retorna 0 para segunda-feira e 6 para domingo
    df['day_of_week_num'] = df['timestamp'].dt.weekday # 0=Monday, 6=Sunday
    df['day_name'] = df['timestamp'].dt.day_name() # e.g., 'Monday', 'Saturday'
    df['day_type'] = df['day_of_week_num'].apply(lambda x: 'Fim de Semana' if x >= 5 else 'Dia de Semana')
    
    
    
    return df

# Caminho para o seu CSV transformado.
# Assumimos que 'app.py' est√° em 'src/' e o CSV em 'src/data/'
transformed_csv_path = 'data/energy30daysLong.csv'
df_consumption = load_transformed_data(transformed_csv_path)

# --- T√≠tulo e Introdu√ß√£o da An√°lise ---
st.title("üìä Storytelling com Dados: Otimizando o Consumo de Energia de Equipamentos")
st.markdown("""
Este projeto demonstra como a **visualiza√ß√£o eficaz de dados** pode transformar um mar de n√∫meros em **insights acion√°veis**.
Nosso objetivo √© identificar oportunidades de economia no consumo de energia de diversos equipamentos, respondendo a perguntas como:
* H√° equipamentos que consomem muito mais que os demais?
* Existem dias ou hor√°rios com picos de consumo inesperados?
Vamos de uma visualiza√ß√£o confusa para uma hist√≥ria clara e com potencial de otimiza√ß√£o.
""")


### **Visualiza√ß√£o 1: O "Prato de Espaguete" (Gr√°fico Ca√≥tico)**


st.header("1. O Ponto de Partida: Uma Visualiza√ß√£o Ca√≥tica")
st.write("Come√ßamos com a representa√ß√£o direta de todas as medi√ß√µes de consumo dos 20 equipamentos ao longo do m√™s.")

# Gr√°fico de linha "ca√≥tico"
fig_chaotic = px.line(df_consumption, 
                      x='timestamp', 
                      y='consumption_kwh', 
                      color='equipment_id', # Cada equipamento uma linha/cor
                      title='Consumo de Energia de Todos os Equipamentos ao Longo do M√™s (Dificil de Analisar)',
                      labels={'timestamp': 'Data e Hora', 'consumption_kwh': 'Consumo (kWh)', 'equipment_id': 'Equipamento ID'})

fig_chaotic.update_layout(
    xaxis_title="Data e Hora",
    yaxis_title="Consumo (kWh)",
    showlegend=True, # Mostrar a legenda para evidenciar o excesso
    height=600,
    hovermode="x unified" # Ajuda um pouco, mas ainda √© confuso
)
st.plotly_chart(fig_chaotic, use_container_width=True)

st.markdown("""
Como √© evidente, este gr√°fico √© um **"prato de espaguete" de linhas**. A sobreposi√ß√£o de 20 equipamentos diferentes, cada um com sua pr√≥pria linha, e a densidade de dados (uma medi√ß√£o por dia) resultam em um visual ileg√≠vel.
√â imposs√≠vel extrair qualquer insight significativo daqui. N√£o conseguimos identificar padr√µes, anomalias ou os equipamentos de maior consumo.
""")



### **Visualiza√ß√£o 2: O Heatmap Interativo (Descoberta de Padr√µes)**


# app.py (continua√ß√£o)

st.header("2. O Primeiro N√≠vel de Refinamento: Padr√µes de Consumo Semanal")
st.write("""
Para come√ßar a entender o consumo, vamos focar em uma pergunta fundamental: **como o consumo total de energia se comporta entre os dias de semana e os fins de semana?**
Aqui, agregamos o consumo de **todos os equipamentos** para cada semana do m√™s, separando os dias √∫teis dos s√°bados e domingos.
""")

# Adicionar uma coluna para identificar a semana do ano (ou do m√™s)
# Usaremos 'isocalendar().week' para a semana do ano
df_consumption['week_of_year'] = df_consumption['timestamp'].dt.isocalendar().week.astype(int)

# --- Agrega√ß√£o do consumo TOTAL para dias de semana e fins de semana por semana ---
# Agrupar por semana do ano e tipo de dia, e somar o consumo de todos os equipamentos
df_weekly_total_consumption = df_consumption.groupby(['week_of_year', 'day_type'])['consumption_kwh'].sum().reset_index()

# Garantir que a ordem dos tipos de dia seja consistente
df_weekly_total_consumption['day_type'] = pd.Categorical(
    df_weekly_total_consumption['day_type'], 
    categories=['Dia de Semana', 'Fim de Semana'], 
    ordered=True
)
df_weekly_total_consumption = df_weekly_total_consumption.sort_values(['week_of_year', 'day_type'])

fig_weekly_comparison = px.bar(df_weekly_total_consumption,
                               x='week_of_year',
                               y='consumption_kwh',
                               color='day_type',
                               barmode='group', # Barras agrupadas para comparar semana vs fim de semana
                               title='Consumo Total Agregado (kWh) por Semana: Dias de Semana vs. Fins de Semana',
                               labels={'week_of_year': 'Semana do Ano', 'consumption_kwh': 'Consumo Total (kWh)', 'day_type': 'Tipo de Dia'},
                               hover_data={'week_of_year': True, 'day_type': True, 'consumption_kwh': ':.0f'},
                               height=500
                              )

fig_weekly_comparison.update_layout(xaxis_title="Semana do Ano")
fig_weekly_comparison.update_yaxes(title_text="Consumo Total (kWh)")

st.plotly_chart(fig_weekly_comparison, use_container_width=True)

st.markdown("""
Com esta visualiza√ß√£o, a diferen√ßa √© evidente! Podemos notar que o consumo total em **dias de semana** √© consistentemente **maior** que nos **fins de semana**.
Isso sugere que h√° uma correla√ß√£o entre o hor√°rio de expediente/produ√ß√£o e o consumo de energia. A boa not√≠cia √© que, se o consumo de fim de semana n√£o for zero ou muito baixo, ainda h√° **potencial para otimiza√ß√£o** nos dias de n√£o opera√ß√£o.

Agora que confirmamos essa diferen√ßa macro, podemos mergulhar mais fundo nos dias da semana para ver os padr√µes di√°rios.
""")

# app.py (continua√ß√£o) Parte 4 : Heatmaps 
df_avg_monthly_consumption = df_consumption.groupby('equipment_id')['consumption_kwh'].mean().round(2).to_dict()

# --- Identificar os Top 10 Equipamentos com maior consumo m√©dio geral ---
top_10_equipments = df_consumption.groupby('equipment_id')['consumption_kwh'].mean().nlargest(10).index.tolist()

st.header("4. Detalhando o Consumo Di√°rio: Equipamento por Dia da Semana (Semanas Chave)")
st.write("""
Com base na an√°lise anterior, onde confirmamos que os dias de semana t√™m consumo total significativamente maior,
vamos aprofundar a investiga√ß√£o. Selecionamos a **Semana 24** (uma de menor consumo) e a **Semana 26** (uma de maior consumo)
para um olhar detalhado.

Este heatmap mostra o **consumo di√°rio de cada equipamento** por dia da semana.
**Passe o mouse sobre uma c√©lula para ver o consumo m√©dio mensal desse equipamento!**
""")

# --- Filtrar para as semanas 24 e 26 E para os TOP 10 Equipamentos ---
df_selected_weeks_top10 = df_consumption[
    (df_consumption['week_of_year'].isin([24, 26])) &
    (df_consumption['equipment_id'].isin(top_10_equipments)) # NOVO FILTRO APLICADO AQUI
].copy() 

# Agrega√ß√£o para o Heatmap: Consumo total por equipamento, dia da semana e semana do ano
# Note que estamos pegando o consumo SUM di√°rio de cada equipamento
# Agrega√ß√£o para o Heatmap
df_heatmap_eq_day_top10 = df_selected_weeks_top10.groupby(['equipment_id', 'day_name', 'week_of_year', 'day_of_week_num'])['consumption_kwh'].sum().reset_index()

## Ordenar os dias da semana corretamente (Seg a Dom)
day_order_names = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
df_heatmap_eq_day_top10['day_name'] = pd.Categorical(df_heatmap_eq_day_top10['day_name'], categories=day_order_names, ordered=True)
df_heatmap_eq_day_top10 = df_heatmap_eq_day_top10.sort_values(['equipment_id', 'day_of_week_num'])

# Criar um pivoteamento para cada semana para gerar o heatmap
# X-axis: dia da semana (nome); Y-axis: equipamento_id
# Faremos dois heatmaps ou um com facet_col, dependendo do que ficar mais claro.
# Um com facet_col √© geralmente melhor para compara√ß√£o direta.

# Calcular o consumo m√©dio MENSAL de cada equipamento para o hover
df_avg_monthly_consumption = df_consumption.groupby('equipment_id')['consumption_kwh'].mean().round(2).to_dict()


# --- Heatmap para a Semana 24 (Ajustado) ---
st.subheader("Consumo Di√°rio (kWh) dos Top 10 Equipamentos - Semana 24 (Menor Consumo Geral)")
df_week_24_top10 = df_heatmap_eq_day_top10[df_heatmap_eq_day_top10['week_of_year'] == 24]
heatmap_data_24_top10 = df_week_24_top10.pivot_table(index='equipment_id', columns='day_name', values='consumption_kwh', fill_value=0)
heatmap_data_24_top10 = heatmap_data_24_top10[day_order_names] # Garante a ordem das colunas

custom_data_24_top10 = np.empty(heatmap_data_24_top10.shape, dtype=object)
for r_idx, eq_id in enumerate(heatmap_data_24_top10.index):
    for c_idx, day_name in enumerate(heatmap_data_24_top10.columns):
        custom_data_24_top10[r_idx, c_idx] = f"{df_avg_monthly_consumption.get(eq_id, 'N/A')} kWh"


fig_heatmap_24_top10 = go.Figure(data=go.Heatmap(
    z=heatmap_data_24_top10.values,
    x=heatmap_data_24_top10.columns,
    y=heatmap_data_24_top10.index,
    colorscale='Viridis_r', # NOVO: Invertida. Cores escuras para maior consumo
    colorbar=dict(title='Consumo Di√°rio (kWh)'),
    customdata=custom_data_24_top10,
    hovertemplate=(
        "Equipamento: %{y}<br>"
        "Dia da Semana: %{x}<br>"
        "Consumo Di√°rio: %{z:.0f} kWh<br>"
        "<extra><b>Consumo M√©dio Mensal:</b> %{customdata}</extra>"
    ),
    # NOVO: Linhas de GRID
    ygap=1, # Espa√ßo entre as c√©lulas no eixo Y
    xgap=1, # Espa√ßo entre as c√©lulas no eixo X
))

fig_heatmap_24_top10.update_layout(
    title='Consumo Di√°rio dos TOP 10 Equipamentos - Semana 24 (Menor Consumo Geral)',
    xaxis_title='Dia da Semana',
    yaxis_title='Equipamento ID',
    yaxis=dict(categoryorder='category ascending'),
    xaxis=dict(categoryarray=day_order_names, categoryorder='array'),
    height=700
)
st.plotly_chart(fig_heatmap_24_top10, use_container_width=True)


# --- Heatmap para a Semana 26 (Ajustado) ---
st.subheader("Consumo Di√°rio (kWh) dos Top 10 Equipamentos - Semana 26 (Maior Consumo Geral)")
df_week_26_top10 = df_heatmap_eq_day_top10[df_heatmap_eq_day_top10['week_of_year'] == 26]
heatmap_data_26_top10 = df_week_26_top10.pivot_table(index='equipment_id', columns='day_name', values='consumption_kwh', fill_value=0)
heatmap_data_26_top10 = heatmap_data_26_top10[day_order_names] # Garante a ordem das colunas

custom_data_26_top10 = np.empty(heatmap_data_26_top10.shape, dtype=object)
for r_idx, eq_id in enumerate(heatmap_data_26_top10.index):
    for c_idx, day_name in enumerate(heatmap_data_26_top10.columns):
        custom_data_26_top10[r_idx, c_idx] = f"{df_avg_monthly_consumption.get(eq_id, 'N/A')} kWh"


fig_heatmap_26_top10 = go.Figure(data=go.Heatmap(
    z=heatmap_data_26_top10.values,
    x=heatmap_data_26_top10.columns,
    y=heatmap_data_26_top10.index,
    colorscale='Viridis_r', # NOVO: Invertida. Cores escuras para maior consumo
    colorbar=dict(title='Consumo Di√°rio (kWh)'),
    customdata=custom_data_26_top10,
    hovertemplate=(
        "Equipamento: %{y}<br>"
        "Dia da Semana: %{x}<br>"
        "Consumo Di√°rio: %{z:.0f} kWh<br>"
        "<extra><b>Consumo M√©dio Mensal:</b> %{customdata}</extra>"
    ),
    # NOVO: Linhas de GRID
    ygap=1, # Espa√ßo entre as c√©lulas no eixo Y
    xgap=1, # Espa√ßo entre as c√©lulas no eixo X
))

fig_heatmap_26_top10.update_layout(
    title='Consumo Di√°rio dos TOP 10 Equipamentos - Semana 26 (Maior Consumo Geral)',
    xaxis_title='Dia da Semana',
    yaxis_title='Equipamento ID',
    yaxis=dict(categoryorder='category ascending'),
    xaxis=dict(categoryarray=day_order_names, categoryorder='array'),
    height=700
)
st.plotly_chart(fig_heatmap_26_top10, use_container_width=True)

st.markdown("""
Estes heatmaps focados nos **TOP 10 equipamentos** e com a **escala de cores invertida** (onde cores mais escuras representam maior consumo) tornam os padr√µes de consumo muito mais vis√≠veis. As **linhas de grade** ajudam a delimitar cada c√©lula, facilitando a identifica√ß√£o r√°pida.

Ao comparar a Semana 24 e a Semana 26, podemos ver:
* Quais equipamentos aumentaram ou diminu√≠ram significativamente o consumo em dias espec√≠ficos.
* Padr√µes de consumo persistentes em fins de semana para os top consumidores.
* Novas oportunidades de otimiza√ß√£o em equipamentos que talvez n√£o fossem t√£o vis√≠veis antes.
""")

# app.py (continua√ß√£o - Parte 5: Conclus√£o)

st.header("5. Conclus√£o: De Dados a Decis√µes Acion√°veis")
st.write("""
Atrav√©s de uma sequ√™ncia de visualiza√ß√µes focadas e interativas, conseguimos transformar um conjunto de dados complexo em intelig√™ncia de neg√≥cio.
Partimos de um "prato de espaguete" ileg√≠vel para dashboards claros que revelam padr√µes e oportunidades.
""")

st.markdown("""
**Principais Insights Obtidos com esta Abordagem:**
* **Diferen√ßas entre Dias de Semana e Fins de Semana:** Confirmamos que o consumo total √© significativamente maior em dias √∫teis, mas que ainda h√° consumo consider√°vel nos fins de semana, indicando potencial de otimiza√ß√£o.
* **Identifica√ß√£o de 'Vil√µes' Persistentes:** Ao focar nos Top 10 equipamentos, pudemos ver quais s√£o os maiores consumidores e como seu padr√£o varia entre semanas de alto e baixo consumo.
* **Padr√µes de Consumo por Equipamento e Dia:** Os heatmaps detalhados permitem identificar dias espec√≠ficos onde certos equipamentos t√™m picos de consumo inesperados ou sustentam alto uso fora do hor√°rio de opera√ß√£o.

**Oportunidades de Otimiza√ß√£o e Pr√≥ximos Passos Recomendados:**
1.  **Auditoria Operacional Focada:** Investigar os equipamentos que apresentam consumo elevado em fins de semana ou padr√µes at√≠picos (identificados nos heatmaps) para entender a causa raiz. Isso pode envolver verifica√ß√µes de opera√ß√£o, manuten√ß√£o ou agendamentos.
2.  **Otimiza√ß√£o de Hor√°rios:** Programar o desligamento ou opera√ß√£o em baixa pot√™ncia de equipamentos fora do hor√°rio de pico ou em dias de inatividade (especialmente fins de semana).
3.  **Manuten√ß√£o Preventiva:** Analisar equipamentos que mostram consumo inconsistente ou picos inexplic√°veis, pois podem indicar falhas ou inefici√™ncias.
4.  **Monitoramento Cont√≠nuo:** Utilizar este dashboard como ferramenta para acompanhar os resultados das a√ß√µes de otimiza√ß√£o e garantir a sustentabilidade dos esfor√ßos de economia de energia.

""")

st.success("Com a an√°lise correta, dados de consumo se tornam um mapa para a **efici√™ncia, sustentabilidade e economia**!")